/**
 * PortX ORCA Account Management
 * PortX ORCA semantic and interaction is based on ISO 20022 and restricted to the US banking domain. The scope covers the following communication flows: bank account opening, maintenance, closing and reporting. In many cases, the financial institution will require additional documentation that is available as PDF or Word document. The recommended solution is to group one ORCA message (for example the account opening request) with these accompanying documents in one file archive. The archive establishes the link between the different documents. Every ORCA request message has an attribute to support the ISO 20022 digital signature.  
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: betiana.darderes@portx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AccountChargePayment } from './accountChargePayment';
import { GenericCode } from './genericCode';
import { Frequency } from './frequency';
import { InterestCalculationDescriptor } from './interestCalculationDescriptor';
import { Balance } from './balance';


/**
 * Calculation of a service charge or fee.
 */
export interface ChargeCalculation { 
    /**
     * Date and time at which the period starts.
     */
    fromDateTime?: string;
    /**
     * Date and time at which the period ends.
     */
    upToDateTime?: string;
    /**
     * Unique identifier of charge.  
     */
    chargeId?: string;
    /**
     * Name of the charge calculation in PascalCase. Possible values: Fee, Overdraft, CardLatePayment, CashAdvance, LatePayment, CashWithdrawal, EarlyWithdrawal, Dormant, EIM, ATM, BillPayment, FDIC, Overdraft, OverdraftInterest, OverdraftCourtesy. Service Charge values: AutomaticActivityCharge, MaintenanceActivityCharge, MaintenanceServiceCharge. ServiceCharge, ServiceChargeCreditBack. Also other external codes to identify the charge.  
     */
    name?: string;
    /**
     * Specifies the current status of the charge.         Possible values are: Charged, Waived, AnalysisAddenda, AddendaCharged, AddendaChargedOnCycleDay. 
     */
    status?: string;
    /**
     * Amount charged for the service.
     */
    amount?: string;
    /**
     * Charge currency 
     */
    currency?: string;
    /**
     * Rate applied on a basis amount to calculate the service charge. 
     */
    rate?: string;
    /**
     * Type of service for which a charge is asked or paid. Some possible ISO 20022 compliant values are:     BrokerageFee, Commission, BackEndLoad, FrontEndLoad, Switch, DilutionLevy, Discount, ManagementFee, TransferFee, MatchingFees, PostageCharge, RegulatoryFee, ShippingCharge, ServiceProvisionFee, SpecialConcessions, PartAcquis, Penalty, ContingencyDeferredSalesCharge, Equalisation, CorrespondentBankCharge, Premium, Initial, AdvisoryFee, CustodyFee, PublicationFee, AccountingFee, SignatureService, StorageAtDestination, StorageAtOrigin, Packaging, PickUp, DangerousGoodsFee, SecurityCharge, InsurancePremium, CollectFreight, ClearanceAndHandlingAtOrigin, ClearanceAndHandlingAtDestination, AirWayBillFee, TransportCharges, UCITSCommission, SpeciallyAgreedFrontEndLoad, ADRFee, IssuanceCancellationFee, MiscellaneousFee, IssuanceFee, Fee, Insurance, NonTaxable, Recurring, Taxable.           
     */
    chargeType?: string;
    /**
     * Indicates whether the account is exempt of the charge. 
     */
    exemptIndicator?: boolean;
    /**
     * Indicates the number of charge periods that the account is exempt from charges. 
     */
    exemptPeriodsNumber?: number;
    /**
     * Additional charge codes. Possible values: CalculationCodeNumber, ServiceChargePrefix, ServiceChargeCode. 
     */
    codes?: Array<GenericCode>;
    /**
     * Servicer charge calculation code. Possible values: FIFO, older payment past due. LIFO, most recent payment past due. Also could be a Bank defined string.  
     */
    calculationMethodCode?: string;
    /**
     * Indicates other calculation method options for charge calculation. 
     */
    calculationMethodOptions?: Array<string>;
    options?: Array<string>;
    /**
     * Specifies the calculation basis of a charge or fee. Some possible ISO 20022 compliant values are:     Average, Daily, Monthly, Annual, FullTerm, RemainingTerm, Monthly78th                 
     */
    calculationBasis?: string;
    /**
     * Specifies which party(ies) will pay charges due for processing of the instruction. BorneByDebtor, BorneByCreditor,  Shared, FollowingServiceLevel 
     */
    bearerType?: string;
    /**
     * Maximum amount of money asked or paid for the charge. 
     */
    maximumAmount?: string;
    /**
     * Maximum Number of charges. 
     */
    maximumNumber?: number;
    /**
     * Minimum amount of money asked or paid for the charge. 
     */
    minimumAmount?: string;
    /**
     * Indicates whether the charge is enabled for automatic charge. 
     */
    enableIndicator?: boolean;
    relatedInterest?: InterestCalculationDescriptor;
    /**
     * Indicates whether the charge is automatically debited from the defined account. 
     */
    debitIndicator?: boolean;
    /**
     * Payments methods to waive o to pay back the charge. 
     */
    payments?: Array<AccountChargePayment>;
    periodicity?: Frequency;
    balances?: Array<Balance>;
    description?: string;
}

