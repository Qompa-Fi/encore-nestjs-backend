/**
 * PortX ORCA Account Management
 * PortX ORCA semantic and interaction is based on ISO 20022 and restricted to the US banking domain. The scope covers the following communication flows: bank account opening, maintenance, closing and reporting. In many cases, the financial institution will require additional documentation that is available as PDF or Word document. The recommended solution is to group one ORCA message (for example the account opening request) with these accompanying documents in one file archive. The archive establishes the link between the different documents. Every ORCA request message has an attribute to support the ISO 20022 digital signature.  
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: betiana.darderes@portx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Restriction } from './restriction';
import { AccountParty } from './accountParty';
import { SpotDate } from './spotDate';
import { InterestCalculationDescriptor } from './interestCalculationDescriptor';
import { Limit } from './limit';


/**
 * Specifies the current state of a loan.
 */
export interface LoanDescriptor { 
    /**
     * Identification assigned by the account service institution (Servicer). Could be encoded (UUID). Also may be used as composite account identifier when overlaying the account code parts. <branch-type-subtype-number>         
     */
    loanId?: string;
    /**
     * Specifies the current state of an account. Possible  values names are:  Pending,   Form,  Denied,   Review,  Approve,  Withdrawn,  Disable,  Funded,  Deleted,  WriteDown,  WrittenOff,  Active,  PaymentPastDue,  Foreclosure,  Bankruptcy. 
     */
    status?: string;
    statusDateAndTime?: string;
    /**
     * The quality score is based on a borrower\'s credit history, collateral, and the likelihood of repayment. 
     */
    qualityScore?: string;
    /**
     * A particular point in the progression of time in a calendar year expressed in the YYYY-MM-DD format.
     */
    openDate?: string;
    /**
     * Date on which the loan was funded or closed
     */
    fundedDate?: string;
    /**
     * Specifies the type of account ownership. Possible ISO 20022 compliant values names are:  JointAccountWithSurvivorshipRights, JointAccountInCommon, CustodialAccount, SingleOwnerAccount, JointAccount, Corporation, Organization, Business, FormalPartnership, FormalTrust, Nominee, NonProfitOrganization, NotForProfitOrganization, ForProfit, EUResidualEntity, USGovernmentOrganization, GovernmentOrganization, LimitedLiabilityCompany, RegisteredInvestmentCompany, Entrepreneurial, Unincorporated, LimitedPartnership, LimitedLiabilityPartnership, BareOwner, Usufructuary, Fiduciary, ServicerEmployeeAccount, BusinessTrust, FamilyTrust, Estate, PublicFunds, NonUSGovernmentOrganization, Church, Club. More general possible values: Direct, Indirect.  
     */
    ownershipType?: string;
    /**
     * Identification of the product offered by a financial institution to its customers. 
     */
    productId?: string;
    /**
     * Name of the account. It provides an additional means of identification, and is designated by the account servicer in agreement with the account owner.
     */
    name?: string;
    /**
     * Three contiguous letters for the representation of currencies and funds. Valid currency codes are registered with the ISO 4217 Maintenance Agency.  
     */
    currency?: string;
    parties?: Array<AccountParty>;
    /**
     * Amount of money borrowed (excluding interest). 
     */
    principalAmount?: string;
    /**
     * Interest on the principal amount. 
     */
    interestAmount?: string;
    /**
     * Current final repayment date. The maturity date is automatically calculated based upon the first scheduled payment date, the scheduled payment frequency, and the number of payments. 
     */
    maturityDate?: string;
    projectedDates?: Array<SpotDate>;
    pastDates?: Array<SpotDate>;
    restrictions?: Array<Restriction>;
    limits?: Array<Limit>;
    interests?: Array<InterestCalculationDescriptor>;
}

