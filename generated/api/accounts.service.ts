/**
 * PortX ORCA Account Management
 * PortX ORCA semantic and interaction is based on ISO 20022 and restricted to the US banking domain. The scope covers the following communication flows: bank account opening, maintenance, closing and reporting. In many cases, the financial institution will require additional documentation that is available as PDF or Word document. The recommended solution is to group one ORCA message (for example the account opening request) with these accompanying documents in one file archive. The archive establishes the link between the different documents. Every ORCA request message has an attribute to support the ISO 20022 digital signature.  
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: betiana.darderes@portx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { Account } from '../model/account';
import { AccountBalanceResponse } from '../model/accountBalanceResponse';
import { AccountDescriptor } from '../model/accountDescriptor';
import { AccountIdentifiersResponse } from '../model/accountIdentifiersResponse';
import { AccountOwnerResponse } from '../model/accountOwnerResponse';
import { AccountPartyResponse } from '../model/accountPartyResponse';
import { AccountRequest } from '../model/accountRequest';
import { AccountResponse } from '../model/accountResponse';
import { OrganizationAccountResponse } from '../model/organizationAccountResponse';
import { PersonAccountResponse } from '../model/personAccountResponse';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class AccountsService {

    protected basePath = 'https://virtserver.swaggerhub.com/PortX/open-banking-accounts/1.0.16';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Retrieves an Account
     * 
     * @param accountId Account Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAccount(accountId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<Account>>;
    public findAccount(accountId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling findAccount.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Account>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves Account Balances
     * 
     * @param accountId Account Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAccountBalances(accountId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<AccountBalanceResponse>>;
    public findAccountBalances(accountId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling findAccountBalances.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<AccountBalanceResponse>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/balances`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves Account Identifiers
     * 
     * @param accountId Account Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAccountIdentifiers(accountId: string, servicerId?: string, ): Observable<AxiosResponse<AccountIdentifiersResponse>>;
    public findAccountIdentifiers(accountId: string, servicerId?: string, ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling findAccountIdentifiers.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<AccountIdentifiersResponse>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/identifiers`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves Account Owners
     * 
     * @param accountId Account Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAccountOwners(accountId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<AccountOwnerResponse>>;
    public findAccountOwners(accountId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling findAccountOwners.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<AccountOwnerResponse>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/owners`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves Account Parties
     * 
     * @param accountId Account Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAccountRelatedParties(accountId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<AccountPartyResponse>>;
    public findAccountRelatedParties(accountId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling findAccountRelatedParties.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<AccountPartyResponse>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/parties`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves a list of accounts matching the parameters.
     * 
     * @param paginationCursor Pagination Cursor
     * @param paginationTotal Total number of resources. 
     * @param accountIdEq 
     * @param accountOwnershipTypeEq 
     * @param accountTypeEq 
     * @param accountBranchCodeEq 
     * @param statusEq 
     * @param accountNumberEq 
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param cursor Specifies an opaque string value ( \&quot;no  meaning\&quot; string value) at which start retrieving transactions. For instance, limit&#x3D;5&amp;cursor&#x3D;62aef884fbe3470ce7d9a92140b09b17 
     * @param limit Specifies the number of resources to return in one request, specified as an integer from 1 to 100. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAccounts(paginationCursor: string, paginationTotal: string, accountIdEq?: string, accountOwnershipTypeEq?: string, accountTypeEq?: string, accountBranchCodeEq?: string, statusEq?: string, accountNumberEq?: string, servicerId?: string, servicerBranchId?: string, cursor?: string, limit?: string, ): Observable<AxiosResponse<Array<AccountDescriptor>>>;
    public findAccounts(paginationCursor: string, paginationTotal: string, accountIdEq?: string, accountOwnershipTypeEq?: string, accountTypeEq?: string, accountBranchCodeEq?: string, statusEq?: string, accountNumberEq?: string, servicerId?: string, servicerBranchId?: string, cursor?: string, limit?: string, ): Observable<any> {
        if (paginationCursor === null || paginationCursor === undefined) {
            throw new Error('Required parameter paginationCursor was null or undefined when calling findAccounts.');
        }

        if (paginationTotal === null || paginationTotal === undefined) {
            throw new Error('Required parameter paginationTotal was null or undefined when calling findAccounts.');
        }

        let queryParameters = new URLSearchParams();
        if (accountIdEq !== undefined && accountIdEq !== null) {
            queryParameters.append('accountId.eq', <any>accountIdEq);
        }
        if (accountOwnershipTypeEq !== undefined && accountOwnershipTypeEq !== null) {
            queryParameters.append('accountOwnershipType.eq', <any>accountOwnershipTypeEq);
        }
        if (accountTypeEq !== undefined && accountTypeEq !== null) {
            queryParameters.append('accountType.eq', <any>accountTypeEq);
        }
        if (accountBranchCodeEq !== undefined && accountBranchCodeEq !== null) {
            queryParameters.append('accountBranchCode.eq', <any>accountBranchCodeEq);
        }
        if (statusEq !== undefined && statusEq !== null) {
            queryParameters.append('status.eq', <any>statusEq);
        }
        if (accountNumberEq !== undefined && accountNumberEq !== null) {
            queryParameters.append('accountNumber.eq', <any>accountNumberEq);
        }
        if (cursor !== undefined && cursor !== null) {
            queryParameters.append('cursor', <any>cursor);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }
        if (paginationCursor !== undefined && paginationCursor !== null) {
            headers['Pagination-Cursor'] = String(paginationCursor);
        }
        if (paginationTotal !== undefined && paginationTotal !== null) {
            headers['Pagination-Total'] = String(paginationTotal);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<AccountDescriptor>>(`${this.basePath}/accounts`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves Organization Accounts
     * 
     * @param organizationId Organization Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findOrganizationAccounts(organizationId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<OrganizationAccountResponse>>;
    public findOrganizationAccounts(organizationId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling findOrganizationAccounts.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<OrganizationAccountResponse>(`${this.basePath}/organizations/${encodeURIComponent(String(organizationId))}/accounts`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves Person Accounts
     * 
     * @param personId Person Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findPersonAccounts(personId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<PersonAccountResponse>>;
    public findPersonAccounts(personId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling findPersonAccounts.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<PersonAccountResponse>(`${this.basePath}/persons/${encodeURIComponent(String(personId))}/accounts`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Opens an Account
     * 
     * @param accountRequest 
     * @param idempotencyId Idempotency identifier used by the client when making repeated calls
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param coreValidationMode &lt;ENFORCING|PERMISSIVE|DISABLED&gt; Indicates how the API  validates requests against the core validation request policy.  ENFORCING: The API validates all requests against the core validation request policy. The API only sends requests that pass validation to the back-end core service.  PERMISSIVE: The API validates all requests against the validation request policy. The API sends all requests to the back-end service, regardless of whether they pass or fail the core validation.  DISABLED: The API does not validate any requests against the validation request policy. The API gateway sends all requests to the core back-end service. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public openBankingAccount(accountRequest: AccountRequest, idempotencyId?: string, servicerId?: string, servicerBranchId?: string, coreValidationMode?: string, ): Observable<AxiosResponse<Account>>;
    public openBankingAccount(accountRequest: AccountRequest, idempotencyId?: string, servicerId?: string, servicerBranchId?: string, coreValidationMode?: string, ): Observable<any> {
        if (accountRequest === null || accountRequest === undefined) {
            throw new Error('Required parameter accountRequest was null or undefined when calling openBankingAccount.');
        }

        let headers = {...this.defaultHeaders};
        if (idempotencyId !== undefined && idempotencyId !== null) {
            headers['idempotencyId'] = String(idempotencyId);
        }
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }
        if (coreValidationMode !== undefined && coreValidationMode !== null) {
            headers['Core-Validation-Mode'] = String(coreValidationMode);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/vnd.portx-orca+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<Account>(`${this.basePath}/accounts`,
                    accountRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Replaces an Account by Id.
     * Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
     * @param accountId Account Identification
     * @param account 
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param coreValidationMode &lt;ENFORCING|PERMISSIVE|DISABLED&gt; Indicates how the API  validates requests against the core validation request policy.  ENFORCING: The API validates all requests against the core validation request policy. The API only sends requests that pass validation to the back-end core service.  PERMISSIVE: The API validates all requests against the validation request policy. The API sends all requests to the back-end service, regardless of whether they pass or fail the core validation.  DISABLED: The API does not validate any requests against the validation request policy. The API gateway sends all requests to the core back-end service. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceAccountById(accountId: string, account: Account, servicerId?: string, servicerBranchId?: string, coreValidationMode?: string, ): Observable<AxiosResponse<Account>>;
    public replaceAccountById(accountId: string, account: Account, servicerId?: string, servicerBranchId?: string, coreValidationMode?: string, ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling replaceAccountById.');
        }

        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling replaceAccountById.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }
        if (coreValidationMode !== undefined && coreValidationMode !== null) {
            headers['Core-Validation-Mode'] = String(coreValidationMode);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/vnd.portx-orca+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<Account>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}`,
                    account,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Updates an Account
     * Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
     * @param accountId Account Identification
     * @param body 
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param coreValidationMode &lt;ENFORCING|PERMISSIVE|DISABLED&gt; Indicates how the API  validates requests against the core validation request policy.  ENFORCING: The API validates all requests against the core validation request policy. The API only sends requests that pass validation to the back-end core service.  PERMISSIVE: The API validates all requests against the validation request policy. The API sends all requests to the back-end service, regardless of whether they pass or fail the core validation.  DISABLED: The API does not validate any requests against the validation request policy. The API gateway sends all requests to the core back-end service. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAccount(accountId: string, body: object, servicerId?: string, servicerBranchId?: string, coreValidationMode?: string, ): Observable<AxiosResponse<Account>>;
    public updateAccount(accountId: string, body: object, servicerId?: string, servicerBranchId?: string, coreValidationMode?: string, ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling updateAccount.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateAccount.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }
        if (coreValidationMode !== undefined && coreValidationMode !== null) {
            headers['Core-Validation-Mode'] = String(coreValidationMode);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/vnd.portx-orca+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<Account>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}`,
                    body,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
}
