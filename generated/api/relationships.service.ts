/**
 * PortX ORCA Account Management
 * PortX ORCA semantic and interaction is based on ISO 20022 and restricted to the US banking domain. The scope covers the following communication flows: bank account opening, maintenance, closing and reporting. In many cases, the financial institution will require additional documentation that is available as PDF or Word document. The recommended solution is to group one ORCA message (for example the account opening request) with these accompanying documents in one file archive. The archive establishes the link between the different documents. Every ORCA request message has an attribute to support the ISO 20022 digital signature.  
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: betiana.darderes@portx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { CustomerRelationship } from '../model/customerRelationship';
import { CustomerRelationshipPartyResponse } from '../model/customerRelationshipPartyResponse';
import { CustomerRelationshipPersonResponse } from '../model/customerRelationshipPersonResponse';
import { CustomerRelationshipRequest } from '../model/customerRelationshipRequest';
import { PersonCustomerRelationshipResponse } from '../model/personCustomerRelationshipResponse';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class RelationshipsService {

    protected basePath = 'https://virtserver.swaggerhub.com/PortX/open-banking-accounts/1.0.16';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Creates a Relationship
     * 
     * @param customerRelationshipRequest 
     * @param idempotencyId Idempotency identifier used by the client when making repeated calls
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createRelationship(customerRelationshipRequest: CustomerRelationshipRequest, idempotencyId?: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<CustomerRelationship>>;
    public createRelationship(customerRelationshipRequest: CustomerRelationshipRequest, idempotencyId?: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (customerRelationshipRequest === null || customerRelationshipRequest === undefined) {
            throw new Error('Required parameter customerRelationshipRequest was null or undefined when calling createRelationship.');
        }

        let headers = {...this.defaultHeaders};
        if (idempotencyId !== undefined && idempotencyId !== null) {
            headers['idempotencyId'] = String(idempotencyId);
        }
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<CustomerRelationship>(`${this.basePath}/relationships`,
                    customerRelationshipRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves Person Relationships
     * Retrieves all the bank relationships the person may have.
     * @param personId Person Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findPersonRelationships(personId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<PersonCustomerRelationshipResponse>>;
    public findPersonRelationships(personId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling findPersonRelationships.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<PersonCustomerRelationshipResponse>(`${this.basePath}/persons/${encodeURIComponent(String(personId))}/relationships`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves a Relationship
     * 
     * @param relationshipId Relationship Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findRelationshipById(relationshipId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<CustomerRelationship>>;
    public findRelationshipById(relationshipId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (relationshipId === null || relationshipId === undefined) {
            throw new Error('Required parameter relationshipId was null or undefined when calling findRelationshipById.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<CustomerRelationship>(`${this.basePath}/relationships/${encodeURIComponent(String(relationshipId))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves Relationship Parties
     * 
     * @param relationshipId Relationship Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findRelationshipParties(relationshipId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<CustomerRelationshipPartyResponse>>;
    public findRelationshipParties(relationshipId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (relationshipId === null || relationshipId === undefined) {
            throw new Error('Required parameter relationshipId was null or undefined when calling findRelationshipParties.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<CustomerRelationshipPartyResponse>(`${this.basePath}/relationships/${encodeURIComponent(String(relationshipId))}/parties`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves Customer Relationship Persons
     * 
     * @param relationshipId Relationship Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findRelationshipPersons(relationshipId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<CustomerRelationshipPersonResponse>>;
    public findRelationshipPersons(relationshipId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (relationshipId === null || relationshipId === undefined) {
            throw new Error('Required parameter relationshipId was null or undefined when calling findRelationshipPersons.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<CustomerRelationshipPersonResponse>(`${this.basePath}/relationships/${encodeURIComponent(String(relationshipId))}/persons`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves a list of relationships matching the parameters.
     * 
     * @param paginationCursor Pagination Cursor
     * @param paginationTotal Total number of resources. 
     * @param customerNameInc The primary customer name includes the substring provided.
     * @param customerLastNameEq 
     * @param customerFirstNameEq 
     * @param customerBirthDateEq 
     * @param customerPhoneNumberEq Any phone number equals to.
     * @param customerAccountNumberEq 
     * @param customerTinEq 
     * @param customerSsnEq Social Security Number
     * @param customerSsnLast4 Social Security Number last four digits.
     * @param customerEmailEq Email equals to
     * @param customerAddressLineInc Any address line of any postal address includes substring
     * @param customerPostCodeEq Any postal address with post code equals to
     * @param customerCountryEq Any postal address with Country code equals to
     * @param customerCountrySubDivisionInc Any postal address with country subdivision includes substring
     * @param customerTownNameInc Any postal address with town name includes substring
     * @param customerPersonIdEq System id equals to
     * @param customerAuditLastModificationDateLte 
     * @param customerAuditLastModificationDateGte 
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param cursor Specifies an opaque string value ( \&quot;no  meaning\&quot; string value) at which start retrieving transactions. For instance, limit&#x3D;5&amp;cursor&#x3D;62aef884fbe3470ce7d9a92140b09b17 
     * @param limit Specifies the number of resources to return in one request, specified as an integer from 1 to 100. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findRelationships(paginationCursor: string, paginationTotal: string, customerNameInc?: string, customerLastNameEq?: string, customerFirstNameEq?: string, customerBirthDateEq?: string, customerPhoneNumberEq?: string, customerAccountNumberEq?: string, customerTinEq?: string, customerSsnEq?: string, customerSsnLast4?: string, customerEmailEq?: string, customerAddressLineInc?: string, customerPostCodeEq?: string, customerCountryEq?: string, customerCountrySubDivisionInc?: string, customerTownNameInc?: string, customerPersonIdEq?: string, customerAuditLastModificationDateLte?: string, customerAuditLastModificationDateGte?: string, servicerId?: string, servicerBranchId?: string, cursor?: string, limit?: string, ): Observable<AxiosResponse<Array<CustomerRelationship>>>;
    public findRelationships(paginationCursor: string, paginationTotal: string, customerNameInc?: string, customerLastNameEq?: string, customerFirstNameEq?: string, customerBirthDateEq?: string, customerPhoneNumberEq?: string, customerAccountNumberEq?: string, customerTinEq?: string, customerSsnEq?: string, customerSsnLast4?: string, customerEmailEq?: string, customerAddressLineInc?: string, customerPostCodeEq?: string, customerCountryEq?: string, customerCountrySubDivisionInc?: string, customerTownNameInc?: string, customerPersonIdEq?: string, customerAuditLastModificationDateLte?: string, customerAuditLastModificationDateGte?: string, servicerId?: string, servicerBranchId?: string, cursor?: string, limit?: string, ): Observable<any> {
        if (paginationCursor === null || paginationCursor === undefined) {
            throw new Error('Required parameter paginationCursor was null or undefined when calling findRelationships.');
        }

        if (paginationTotal === null || paginationTotal === undefined) {
            throw new Error('Required parameter paginationTotal was null or undefined when calling findRelationships.');
        }

        let queryParameters = new URLSearchParams();
        if (customerNameInc !== undefined && customerNameInc !== null) {
            queryParameters.append('customer.name.inc', <any>customerNameInc);
        }
        if (customerLastNameEq !== undefined && customerLastNameEq !== null) {
            queryParameters.append('customer.lastName.eq', <any>customerLastNameEq);
        }
        if (customerFirstNameEq !== undefined && customerFirstNameEq !== null) {
            queryParameters.append('customer.firstName.eq', <any>customerFirstNameEq);
        }
        if (customerBirthDateEq !== undefined && customerBirthDateEq !== null) {
            queryParameters.append('customer.birthDate.eq', <any>customerBirthDateEq);
        }
        if (customerPhoneNumberEq !== undefined && customerPhoneNumberEq !== null) {
            queryParameters.append('customer.phoneNumber.eq', <any>customerPhoneNumberEq);
        }
        if (customerAccountNumberEq !== undefined && customerAccountNumberEq !== null) {
            queryParameters.append('customer.accountNumber.eq', <any>customerAccountNumberEq);
        }
        if (customerTinEq !== undefined && customerTinEq !== null) {
            queryParameters.append('customer.tin.eq', <any>customerTinEq);
        }
        if (customerSsnEq !== undefined && customerSsnEq !== null) {
            queryParameters.append('customer.ssn.eq', <any>customerSsnEq);
        }
        if (customerSsnLast4 !== undefined && customerSsnLast4 !== null) {
            queryParameters.append('customer.ssn.last4', <any>customerSsnLast4);
        }
        if (customerEmailEq !== undefined && customerEmailEq !== null) {
            queryParameters.append('customer.email.eq', <any>customerEmailEq);
        }
        if (customerAddressLineInc !== undefined && customerAddressLineInc !== null) {
            queryParameters.append('customer.addressLine.inc', <any>customerAddressLineInc);
        }
        if (customerPostCodeEq !== undefined && customerPostCodeEq !== null) {
            queryParameters.append('customer.postCode.eq', <any>customerPostCodeEq);
        }
        if (customerCountryEq !== undefined && customerCountryEq !== null) {
            queryParameters.append('customer.country.eq', <any>customerCountryEq);
        }
        if (customerCountrySubDivisionInc !== undefined && customerCountrySubDivisionInc !== null) {
            queryParameters.append('customer.countrySubDivision.inc', <any>customerCountrySubDivisionInc);
        }
        if (customerTownNameInc !== undefined && customerTownNameInc !== null) {
            queryParameters.append('customer.townName.inc', <any>customerTownNameInc);
        }
        if (customerPersonIdEq !== undefined && customerPersonIdEq !== null) {
            queryParameters.append('customer.personId.eq', <any>customerPersonIdEq);
        }
        if (customerAuditLastModificationDateLte !== undefined && customerAuditLastModificationDateLte !== null) {
            queryParameters.append('customer.audit.lastModificationDate.lte', <any>customerAuditLastModificationDateLte);
        }
        if (customerAuditLastModificationDateGte !== undefined && customerAuditLastModificationDateGte !== null) {
            queryParameters.append('customer.audit.lastModificationDate.gte', <any>customerAuditLastModificationDateGte);
        }
        if (cursor !== undefined && cursor !== null) {
            queryParameters.append('cursor', <any>cursor);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }
        if (paginationCursor !== undefined && paginationCursor !== null) {
            headers['Pagination-Cursor'] = String(paginationCursor);
        }
        if (paginationTotal !== undefined && paginationTotal !== null) {
            headers['Pagination-Total'] = String(paginationTotal);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<CustomerRelationship>>(`${this.basePath}/relationships`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Updates a Relationship
     * Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
     * @param relationshipId Relationship Identification
     * @param body 
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateRelationship(relationshipId: string, body: object, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<CustomerRelationship>>;
    public updateRelationship(relationshipId: string, body: object, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (relationshipId === null || relationshipId === undefined) {
            throw new Error('Required parameter relationshipId was null or undefined when calling updateRelationship.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateRelationship.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<CustomerRelationship>(`${this.basePath}/relationships/${encodeURIComponent(String(relationshipId))}`,
                    body,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
}
