/**
 * PortX ORCA Account Management
 * PortX ORCA semantic and interaction is based on ISO 20022 and restricted to the US banking domain. The scope covers the following communication flows: bank account opening, maintenance, closing and reporting. In many cases, the financial institution will require additional documentation that is available as PDF or Word document. The recommended solution is to group one ORCA message (for example the account opening request) with these accompanying documents in one file archive. The archive establishes the link between the different documents. Every ORCA request message has an attribute to support the ISO 20022 digital signature.  
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: betiana.darderes@portx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { InternalTransfer } from '../model/internalTransfer';
import { InternalTransferCancellationRequest } from '../model/internalTransferCancellationRequest';
import { InternalTransferConfirmationRequest } from '../model/internalTransferConfirmationRequest';
import { InternalTransferRequest } from '../model/internalTransferRequest';
import { InternalTransferResponse } from '../model/internalTransferResponse';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class InternalTransfersService {

    protected basePath = 'https://virtserver.swaggerhub.com/PortX/open-banking-accounts/1.0.16';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Internal Transfer Status
     * Returns the status of an internal transfer.
     * @param transferId Internal Transfer Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findInternalTransfer(transferId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<InternalTransfer>>;
    public findInternalTransfer(transferId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (transferId === null || transferId === undefined) {
            throw new Error('Required parameter transferId was null or undefined when calling findInternalTransfer.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<InternalTransfer>(`${this.basePath}/internal-transfers/${encodeURIComponent(String(transferId))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves a list of internal transfers matching the parameters.
     * 
     * @param paginationCursor Pagination Cursor
     * @param paginationTotal Total number of resources. 
     * @param transferIdEq 
     * @param sourceAccountIdEq 
     * @param sourceAccountNumberEq 
     * @param destinationAccountIdEq 
     * @param destinationAccountNumberEq 
     * @param amountLte 
     * @param amountGte 
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param cursor Specifies an opaque string value ( \&quot;no  meaning\&quot; string value) at which start retrieving transactions. For instance, limit&#x3D;5&amp;cursor&#x3D;62aef884fbe3470ce7d9a92140b09b17 
     * @param limit Specifies the number of resources to return in one request, specified as an integer from 1 to 100. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findInternalTransfers(paginationCursor: string, paginationTotal: string, transferIdEq?: string, sourceAccountIdEq?: string, sourceAccountNumberEq?: string, destinationAccountIdEq?: string, destinationAccountNumberEq?: string, amountLte?: string, amountGte?: string, servicerId?: string, servicerBranchId?: string, cursor?: string, limit?: string, ): Observable<AxiosResponse<Array<InternalTransfer>>>;
    public findInternalTransfers(paginationCursor: string, paginationTotal: string, transferIdEq?: string, sourceAccountIdEq?: string, sourceAccountNumberEq?: string, destinationAccountIdEq?: string, destinationAccountNumberEq?: string, amountLte?: string, amountGte?: string, servicerId?: string, servicerBranchId?: string, cursor?: string, limit?: string, ): Observable<any> {
        if (paginationCursor === null || paginationCursor === undefined) {
            throw new Error('Required parameter paginationCursor was null or undefined when calling findInternalTransfers.');
        }

        if (paginationTotal === null || paginationTotal === undefined) {
            throw new Error('Required parameter paginationTotal was null or undefined when calling findInternalTransfers.');
        }

        let queryParameters = new URLSearchParams();
        if (transferIdEq !== undefined && transferIdEq !== null) {
            queryParameters.append('transferId.eq', <any>transferIdEq);
        }
        if (sourceAccountIdEq !== undefined && sourceAccountIdEq !== null) {
            queryParameters.append('sourceAccountId.eq', <any>sourceAccountIdEq);
        }
        if (sourceAccountNumberEq !== undefined && sourceAccountNumberEq !== null) {
            queryParameters.append('sourceAccountNumber.eq', <any>sourceAccountNumberEq);
        }
        if (destinationAccountIdEq !== undefined && destinationAccountIdEq !== null) {
            queryParameters.append('destinationAccountId.eq', <any>destinationAccountIdEq);
        }
        if (destinationAccountNumberEq !== undefined && destinationAccountNumberEq !== null) {
            queryParameters.append('destinationAccountNumber.eq', <any>destinationAccountNumberEq);
        }
        if (amountLte !== undefined && amountLte !== null) {
            queryParameters.append('amount.lte', <any>amountLte);
        }
        if (amountGte !== undefined && amountGte !== null) {
            queryParameters.append('amount.gte', <any>amountGte);
        }
        if (cursor !== undefined && cursor !== null) {
            queryParameters.append('cursor', <any>cursor);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }
        if (paginationCursor !== undefined && paginationCursor !== null) {
            headers['Pagination-Cursor'] = String(paginationCursor);
        }
        if (paginationTotal !== undefined && paginationTotal !== null) {
            headers['Pagination-Total'] = String(paginationTotal);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<InternalTransfer>>(`${this.basePath}/internal-transfers`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Internal Transfer Request
     * Instruction to transfer funds between ledger accounts, holding accounts, or final account. To create a balanced internal transfer, there must be at least one credit entry and one debit entry. Additionally, the sum of all credit entry amounts must equal the sum of all debit entry amounts.
     * @param internalTransferRequest 
     * @param idempotencyId Idempotency identifier used by the client when making repeated calls
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public requestInternalTransfer(internalTransferRequest: InternalTransferRequest, idempotencyId?: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<InternalTransferResponse>>;
    public requestInternalTransfer(internalTransferRequest: InternalTransferRequest, idempotencyId?: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (internalTransferRequest === null || internalTransferRequest === undefined) {
            throw new Error('Required parameter internalTransferRequest was null or undefined when calling requestInternalTransfer.');
        }

        let headers = {...this.defaultHeaders};
        if (idempotencyId !== undefined && idempotencyId !== null) {
            headers['idempotencyId'] = String(idempotencyId);
        }
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<InternalTransferResponse>(`${this.basePath}/internal-transfers`,
                    internalTransferRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Internal Transfer Cancellation
     * Request a transfer cancellation.
     * @param transferId Internal Transfer Identification
     * @param internalTransferCancellationRequest 
     * @param idempotencyId Idempotency identifier used by the client when making repeated calls
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public requestInternalTransferCancellation(transferId: string, internalTransferCancellationRequest: InternalTransferCancellationRequest, idempotencyId?: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<InternalTransfer>>;
    public requestInternalTransferCancellation(transferId: string, internalTransferCancellationRequest: InternalTransferCancellationRequest, idempotencyId?: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (transferId === null || transferId === undefined) {
            throw new Error('Required parameter transferId was null or undefined when calling requestInternalTransferCancellation.');
        }

        if (internalTransferCancellationRequest === null || internalTransferCancellationRequest === undefined) {
            throw new Error('Required parameter internalTransferCancellationRequest was null or undefined when calling requestInternalTransferCancellation.');
        }

        let headers = {...this.defaultHeaders};
        if (idempotencyId !== undefined && idempotencyId !== null) {
            headers['idempotencyId'] = String(idempotencyId);
        }
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<InternalTransfer>(`${this.basePath}/internal-transfers/${encodeURIComponent(String(transferId))}/cancellation`,
                    internalTransferCancellationRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Internal Transfer Confirmation
     * Request transfer settlement from memo posted to hard posted.
     * @param transferId Internal Transfer Identification
     * @param internalTransferConfirmationRequest 
     * @param idempotencyId Idempotency identifier used by the client when making repeated calls
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public requestInternalTransferConfirmation(transferId: string, internalTransferConfirmationRequest: InternalTransferConfirmationRequest, idempotencyId?: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<InternalTransfer>>;
    public requestInternalTransferConfirmation(transferId: string, internalTransferConfirmationRequest: InternalTransferConfirmationRequest, idempotencyId?: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (transferId === null || transferId === undefined) {
            throw new Error('Required parameter transferId was null or undefined when calling requestInternalTransferConfirmation.');
        }

        if (internalTransferConfirmationRequest === null || internalTransferConfirmationRequest === undefined) {
            throw new Error('Required parameter internalTransferConfirmationRequest was null or undefined when calling requestInternalTransferConfirmation.');
        }

        let headers = {...this.defaultHeaders};
        if (idempotencyId !== undefined && idempotencyId !== null) {
            headers['idempotencyId'] = String(idempotencyId);
        }
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<InternalTransfer>(`${this.basePath}/internal-transfers/${encodeURIComponent(String(transferId))}/confirmation`,
                    internalTransferConfirmationRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
}
