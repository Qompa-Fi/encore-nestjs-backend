/**
 * PortX ORCA Account Management
 * PortX ORCA semantic and interaction is based on ISO 20022 and restricted to the US banking domain. The scope covers the following communication flows: bank account opening, maintenance, closing and reporting. In many cases, the financial institution will require additional documentation that is available as PDF or Word document. The recommended solution is to group one ORCA message (for example the account opening request) with these accompanying documents in one file archive. The archive establishes the link between the different documents. Every ORCA request message has an attribute to support the ISO 20022 digital signature.  
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: betiana.darderes@portx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { LedgerAccount } from '../model/ledgerAccount';
import { LedgerAccountBalanceResponse } from '../model/ledgerAccountBalanceResponse';
import { LedgerAccountDescriptor } from '../model/ledgerAccountDescriptor';
import { LedgerAccountRequest } from '../model/ledgerAccountRequest';
import { LedgerAccountTransactionsResponse } from '../model/ledgerAccountTransactionsResponse';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class LedgerAccountsService {

    protected basePath = 'https://virtserver.swaggerhub.com/PortX/open-banking-accounts/1.0.16';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Creates a ledger account or any internal working account of the bank.
     * Creates a ledger account, detailed or general, of the Chart of Accounts. Also can represent holding accounts, mirror accounts or working accounts that are required for the booking of a part of a transaction in the bank world. This is typically the case when amounts cannot immediately be booked on a final account for duty seggregation or processing reasons or in order to mirror bookings on external accounts, like nostro accounts, mirrow or holding account. 
     * @param ledgerAccountRequest 
     * @param idempotencyId Idempotency identifier used by the client when making repeated calls
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createLedgerAccount(ledgerAccountRequest: LedgerAccountRequest, idempotencyId?: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<LedgerAccount>>;
    public createLedgerAccount(ledgerAccountRequest: LedgerAccountRequest, idempotencyId?: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (ledgerAccountRequest === null || ledgerAccountRequest === undefined) {
            throw new Error('Required parameter ledgerAccountRequest was null or undefined when calling createLedgerAccount.');
        }

        let headers = {...this.defaultHeaders};
        if (idempotencyId !== undefined && idempotencyId !== null) {
            headers['idempotencyId'] = String(idempotencyId);
        }
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<LedgerAccount>(`${this.basePath}/ledger-accounts`,
                    ledgerAccountRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves a Ledger Account
     * 
     * @param accountId Account Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findLedgerAccount(accountId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<LedgerAccount>>;
    public findLedgerAccount(accountId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling findLedgerAccount.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<LedgerAccount>(`${this.basePath}/ledger-accounts/${encodeURIComponent(String(accountId))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves Account Balances
     * 
     * @param accountId Account Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findLedgerAccountBalances(accountId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<LedgerAccountBalanceResponse>>;
    public findLedgerAccountBalances(accountId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling findLedgerAccountBalances.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<LedgerAccountBalanceResponse>(`${this.basePath}/ledger-accounts/${encodeURIComponent(String(accountId))}/balances`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves Ledger Account Transactions
     * 
     * @param accountId Account Identification
     * @param paginationCursor Pagination Cursor
     * @param paginationTotal Total number of resources. 
     * @param transactionIdEq 
     * @param statusEq 
     * @param amountLte 
     * @param amountGte 
     * @param creationDateLte Input cycle date less than or equal
     * @param creationDateGte Input cycle date greater than or equal
     * @param servicerId Account Servicer Identification (Bank)
     * @param cursor Specifies an opaque string value ( \&quot;no  meaning\&quot; string value) at which start retrieving transactions. For instance, limit&#x3D;5&amp;cursor&#x3D;62aef884fbe3470ce7d9a92140b09b17 
     * @param limit Specifies the number of resources to return in one request, specified as an integer from 1 to 100. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findLedgerAccountTransactions(accountId: string, paginationCursor: string, paginationTotal: string, transactionIdEq?: string, statusEq?: string, amountLte?: string, amountGte?: string, creationDateLte?: string, creationDateGte?: string, servicerId?: string, cursor?: string, limit?: string, ): Observable<AxiosResponse<LedgerAccountTransactionsResponse>>;
    public findLedgerAccountTransactions(accountId: string, paginationCursor: string, paginationTotal: string, transactionIdEq?: string, statusEq?: string, amountLte?: string, amountGte?: string, creationDateLte?: string, creationDateGte?: string, servicerId?: string, cursor?: string, limit?: string, ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling findLedgerAccountTransactions.');
        }

        if (paginationCursor === null || paginationCursor === undefined) {
            throw new Error('Required parameter paginationCursor was null or undefined when calling findLedgerAccountTransactions.');
        }

        if (paginationTotal === null || paginationTotal === undefined) {
            throw new Error('Required parameter paginationTotal was null or undefined when calling findLedgerAccountTransactions.');
        }

        let queryParameters = new URLSearchParams();
        if (transactionIdEq !== undefined && transactionIdEq !== null) {
            queryParameters.append('transactionId.eq', <any>transactionIdEq);
        }
        if (statusEq !== undefined && statusEq !== null) {
            queryParameters.append('status.eq', <any>statusEq);
        }
        if (amountLte !== undefined && amountLte !== null) {
            queryParameters.append('amount.lte', <any>amountLte);
        }
        if (amountGte !== undefined && amountGte !== null) {
            queryParameters.append('amount.gte', <any>amountGte);
        }
        if (creationDateLte !== undefined && creationDateLte !== null) {
            queryParameters.append('creationDate.lte', <any>creationDateLte);
        }
        if (creationDateGte !== undefined && creationDateGte !== null) {
            queryParameters.append('creationDate.gte', <any>creationDateGte);
        }
        if (cursor !== undefined && cursor !== null) {
            queryParameters.append('cursor', <any>cursor);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (paginationCursor !== undefined && paginationCursor !== null) {
            headers['Pagination-Cursor'] = String(paginationCursor);
        }
        if (paginationTotal !== undefined && paginationTotal !== null) {
            headers['Pagination-Total'] = String(paginationTotal);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<LedgerAccountTransactionsResponse>(`${this.basePath}/ledger-accounts/${encodeURIComponent(String(accountId))}/transactions`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves a list of accounts matching the parameters.
     * 
     * @param paginationCursor Pagination Cursor
     * @param paginationTotal Total number of resources. 
     * @param accountIdEq 
     * @param accountTypeEq 
     * @param accountBranchCodeEq 
     * @param statusEq 
     * @param accountNumberEq 
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param cursor Specifies an opaque string value ( \&quot;no  meaning\&quot; string value) at which start retrieving transactions. For instance, limit&#x3D;5&amp;cursor&#x3D;62aef884fbe3470ce7d9a92140b09b17 
     * @param limit Specifies the number of resources to return in one request, specified as an integer from 1 to 100. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findLedgerAccounts(paginationCursor: string, paginationTotal: string, accountIdEq?: string, accountTypeEq?: string, accountBranchCodeEq?: string, statusEq?: string, accountNumberEq?: string, servicerId?: string, servicerBranchId?: string, cursor?: string, limit?: string, ): Observable<AxiosResponse<Array<LedgerAccountDescriptor>>>;
    public findLedgerAccounts(paginationCursor: string, paginationTotal: string, accountIdEq?: string, accountTypeEq?: string, accountBranchCodeEq?: string, statusEq?: string, accountNumberEq?: string, servicerId?: string, servicerBranchId?: string, cursor?: string, limit?: string, ): Observable<any> {
        if (paginationCursor === null || paginationCursor === undefined) {
            throw new Error('Required parameter paginationCursor was null or undefined when calling findLedgerAccounts.');
        }

        if (paginationTotal === null || paginationTotal === undefined) {
            throw new Error('Required parameter paginationTotal was null or undefined when calling findLedgerAccounts.');
        }

        let queryParameters = new URLSearchParams();
        if (accountIdEq !== undefined && accountIdEq !== null) {
            queryParameters.append('accountId.eq', <any>accountIdEq);
        }
        if (accountTypeEq !== undefined && accountTypeEq !== null) {
            queryParameters.append('accountType.eq', <any>accountTypeEq);
        }
        if (accountBranchCodeEq !== undefined && accountBranchCodeEq !== null) {
            queryParameters.append('accountBranchCode.eq', <any>accountBranchCodeEq);
        }
        if (statusEq !== undefined && statusEq !== null) {
            queryParameters.append('status.eq', <any>statusEq);
        }
        if (accountNumberEq !== undefined && accountNumberEq !== null) {
            queryParameters.append('accountNumber.eq', <any>accountNumberEq);
        }
        if (cursor !== undefined && cursor !== null) {
            queryParameters.append('cursor', <any>cursor);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }
        if (paginationCursor !== undefined && paginationCursor !== null) {
            headers['Pagination-Cursor'] = String(paginationCursor);
        }
        if (paginationTotal !== undefined && paginationTotal !== null) {
            headers['Pagination-Total'] = String(paginationTotal);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<LedgerAccountDescriptor>>(`${this.basePath}/ledger-accounts`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Updates an Account
     * Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
     * @param accountId Account Identification
     * @param body 
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateLedgerAccount(accountId: string, body: object, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<LedgerAccount>>;
    public updateLedgerAccount(accountId: string, body: object, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling updateLedgerAccount.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateLedgerAccount.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<LedgerAccount>(`${this.basePath}/ledger-accounts/${encodeURIComponent(String(accountId))}`,
                    body,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
}
