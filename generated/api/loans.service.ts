/**
 * PortX ORCA Account Management
 * PortX ORCA semantic and interaction is based on ISO 20022 and restricted to the US banking domain. The scope covers the following communication flows: bank account opening, maintenance, closing and reporting. In many cases, the financial institution will require additional documentation that is available as PDF or Word document. The recommended solution is to group one ORCA message (for example the account opening request) with these accompanying documents in one file archive. The archive establishes the link between the different documents. Every ORCA request message has an attribute to support the ISO 20022 digital signature.  
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: betiana.darderes@portx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { AccountDescriptor } from '../model/accountDescriptor';
import { AccountOwnerResponse } from '../model/accountOwnerResponse';
import { Loan } from '../model/loan';
import { LoanBalanceResponse } from '../model/loanBalanceResponse';
import { LoanIdentifiersResponse } from '../model/loanIdentifiersResponse';
import { LoanPartyResponse } from '../model/loanPartyResponse';
import { LoanPaymentCardResponse } from '../model/loanPaymentCardResponse';
import { LoanRequest } from '../model/loanRequest';
import { LoanTransactionsResponse } from '../model/loanTransactionsResponse';
import { PersonLoanResponse } from '../model/personLoanResponse';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class LoansService {

    protected basePath = 'https://virtserver.swaggerhub.com/PortX/open-banking-accounts/1.0.16';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Retrieves a Loan
     * 
     * @param loanId Loan Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findLoan(loanId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<Loan>>;
    public findLoan(loanId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (loanId === null || loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling findLoan.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Loan>(`${this.basePath}/loans/${encodeURIComponent(String(loanId))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves Loan Balances
     * 
     * @param loanId Loan Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findLoanBalances(loanId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<LoanBalanceResponse>>;
    public findLoanBalances(loanId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (loanId === null || loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling findLoanBalances.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<LoanBalanceResponse>(`${this.basePath}/loans/${encodeURIComponent(String(loanId))}/balances`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves Loan Owners
     * 
     * @param loanId Loan Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findLoanBorrowers(loanId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<AccountOwnerResponse>>;
    public findLoanBorrowers(loanId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (loanId === null || loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling findLoanBorrowers.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<AccountOwnerResponse>(`${this.basePath}/loans/${encodeURIComponent(String(loanId))}/owners`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves Loan Cards
     * 
     * @param loanId Loan Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findLoanCards(loanId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<LoanPaymentCardResponse>>;
    public findLoanCards(loanId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (loanId === null || loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling findLoanCards.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<LoanPaymentCardResponse>(`${this.basePath}/loans/${encodeURIComponent(String(loanId))}/cards`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves Loan Identifiers
     * 
     * @param loanId Loan Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findLoanIdentifiers(loanId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<LoanIdentifiersResponse>>;
    public findLoanIdentifiers(loanId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (loanId === null || loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling findLoanIdentifiers.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<LoanIdentifiersResponse>(`${this.basePath}/loans/${encodeURIComponent(String(loanId))}/identifiers`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves Loan Parties
     * 
     * @param loanId Loan Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findLoanRelatedParties(loanId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<LoanPartyResponse>>;
    public findLoanRelatedParties(loanId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (loanId === null || loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling findLoanRelatedParties.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<LoanPartyResponse>(`${this.basePath}/loans/${encodeURIComponent(String(loanId))}/parties`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves Loan Transactions
     * 
     * @param loanId Loan Identification
     * @param paginationCursor Pagination Cursor
     * @param paginationTotal Total number of resources. 
     * @param transactionIdEq 
     * @param amountLte 
     * @param amountGte 
     * @param creationDateLte Creation date less than or equal
     * @param creationDateGte Creation date greater than or equal
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param cursor Specifies an opaque string value ( \&quot;no  meaning\&quot; string value) at which start retrieving transactions. For instance, limit&#x3D;5&amp;cursor&#x3D;62aef884fbe3470ce7d9a92140b09b17 
     * @param limit Specifies the number of resources to return in one request, specified as an integer from 1 to 100. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findLoanTransactions(loanId: string, paginationCursor: string, paginationTotal: string, transactionIdEq?: string, amountLte?: string, amountGte?: string, creationDateLte?: string, creationDateGte?: string, servicerId?: string, servicerBranchId?: string, cursor?: string, limit?: string, ): Observable<AxiosResponse<LoanTransactionsResponse>>;
    public findLoanTransactions(loanId: string, paginationCursor: string, paginationTotal: string, transactionIdEq?: string, amountLte?: string, amountGte?: string, creationDateLte?: string, creationDateGte?: string, servicerId?: string, servicerBranchId?: string, cursor?: string, limit?: string, ): Observable<any> {
        if (loanId === null || loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling findLoanTransactions.');
        }

        if (paginationCursor === null || paginationCursor === undefined) {
            throw new Error('Required parameter paginationCursor was null or undefined when calling findLoanTransactions.');
        }

        if (paginationTotal === null || paginationTotal === undefined) {
            throw new Error('Required parameter paginationTotal was null or undefined when calling findLoanTransactions.');
        }

        let queryParameters = new URLSearchParams();
        if (transactionIdEq !== undefined && transactionIdEq !== null) {
            queryParameters.append('transactionId.eq', <any>transactionIdEq);
        }
        if (amountLte !== undefined && amountLte !== null) {
            queryParameters.append('amount.lte', <any>amountLte);
        }
        if (amountGte !== undefined && amountGte !== null) {
            queryParameters.append('amount.gte', <any>amountGte);
        }
        if (creationDateLte !== undefined && creationDateLte !== null) {
            queryParameters.append('creationDate.lte', <any>creationDateLte);
        }
        if (creationDateGte !== undefined && creationDateGte !== null) {
            queryParameters.append('creationDate.gte', <any>creationDateGte);
        }
        if (cursor !== undefined && cursor !== null) {
            queryParameters.append('cursor', <any>cursor);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }
        if (paginationCursor !== undefined && paginationCursor !== null) {
            headers['Pagination-Cursor'] = String(paginationCursor);
        }
        if (paginationTotal !== undefined && paginationTotal !== null) {
            headers['Pagination-Total'] = String(paginationTotal);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<LoanTransactionsResponse>(`${this.basePath}/loans/${encodeURIComponent(String(loanId))}/transactions`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves a list of loan accounts matching the parameters.
     * 
     * @param paginationCursor Pagination Cursor
     * @param paginationTotal Total number of resources. 
     * @param accountIdEq 
     * @param accountOwnershipTypeEq 
     * @param loanTypeEq 
     * @param loanBranchCodeEq 
     * @param statusEq 
     * @param accountNumberEq 
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param cursor Specifies an opaque string value ( \&quot;no  meaning\&quot; string value) at which start retrieving transactions. For instance, limit&#x3D;5&amp;cursor&#x3D;62aef884fbe3470ce7d9a92140b09b17 
     * @param limit Specifies the number of resources to return in one request, specified as an integer from 1 to 100. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findLoans(paginationCursor: string, paginationTotal: string, accountIdEq?: string, accountOwnershipTypeEq?: string, loanTypeEq?: string, loanBranchCodeEq?: string, statusEq?: string, accountNumberEq?: string, servicerId?: string, servicerBranchId?: string, cursor?: string, limit?: string, ): Observable<AxiosResponse<Array<AccountDescriptor>>>;
    public findLoans(paginationCursor: string, paginationTotal: string, accountIdEq?: string, accountOwnershipTypeEq?: string, loanTypeEq?: string, loanBranchCodeEq?: string, statusEq?: string, accountNumberEq?: string, servicerId?: string, servicerBranchId?: string, cursor?: string, limit?: string, ): Observable<any> {
        if (paginationCursor === null || paginationCursor === undefined) {
            throw new Error('Required parameter paginationCursor was null or undefined when calling findLoans.');
        }

        if (paginationTotal === null || paginationTotal === undefined) {
            throw new Error('Required parameter paginationTotal was null or undefined when calling findLoans.');
        }

        let queryParameters = new URLSearchParams();
        if (accountIdEq !== undefined && accountIdEq !== null) {
            queryParameters.append('accountId.eq', <any>accountIdEq);
        }
        if (accountOwnershipTypeEq !== undefined && accountOwnershipTypeEq !== null) {
            queryParameters.append('accountOwnershipType.eq', <any>accountOwnershipTypeEq);
        }
        if (loanTypeEq !== undefined && loanTypeEq !== null) {
            queryParameters.append('loanType.eq', <any>loanTypeEq);
        }
        if (loanBranchCodeEq !== undefined && loanBranchCodeEq !== null) {
            queryParameters.append('loanBranchCode.eq', <any>loanBranchCodeEq);
        }
        if (statusEq !== undefined && statusEq !== null) {
            queryParameters.append('status.eq', <any>statusEq);
        }
        if (accountNumberEq !== undefined && accountNumberEq !== null) {
            queryParameters.append('accountNumber.eq', <any>accountNumberEq);
        }
        if (cursor !== undefined && cursor !== null) {
            queryParameters.append('cursor', <any>cursor);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }
        if (paginationCursor !== undefined && paginationCursor !== null) {
            headers['Pagination-Cursor'] = String(paginationCursor);
        }
        if (paginationTotal !== undefined && paginationTotal !== null) {
            headers['Pagination-Total'] = String(paginationTotal);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<AccountDescriptor>>(`${this.basePath}/loans`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves personal loan exposure.
     * 
     * @param personId Person Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findPersonLoans(personId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<PersonLoanResponse>>;
    public findPersonLoans(personId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling findPersonLoans.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<PersonLoanResponse>(`${this.basePath}/persons/${encodeURIComponent(String(personId))}/loans`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Opens a Loan
     * 
     * @param loanRequest 
     * @param idempotencyId Idempotency identifier used by the client when making repeated calls
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public openLoanAccount(loanRequest: LoanRequest, idempotencyId?: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<Loan>>;
    public openLoanAccount(loanRequest: LoanRequest, idempotencyId?: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (loanRequest === null || loanRequest === undefined) {
            throw new Error('Required parameter loanRequest was null or undefined when calling openLoanAccount.');
        }

        let headers = {...this.defaultHeaders};
        if (idempotencyId !== undefined && idempotencyId !== null) {
            headers['idempotencyId'] = String(idempotencyId);
        }
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<Loan>(`${this.basePath}/loans`,
                    loanRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Updates a Loan
     * Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
     * @param loanId Loan Identification
     * @param body 
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateLoan(loanId: string, body: object, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<Loan>>;
    public updateLoan(loanId: string, body: object, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (loanId === null || loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling updateLoan.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateLoan.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<Loan>(`${this.basePath}/loans/${encodeURIComponent(String(loanId))}`,
                    body,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
}
