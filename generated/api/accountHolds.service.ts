/**
 * PortX ORCA Account Management
 * PortX ORCA semantic and interaction is based on ISO 20022 and restricted to the US banking domain. The scope covers the following communication flows: bank account opening, maintenance, closing and reporting. In many cases, the financial institution will require additional documentation that is available as PDF or Word document. The recommended solution is to group one ORCA message (for example the account opening request) with these accompanying documents in one file archive. The archive establishes the link between the different documents. Every ORCA request message has an attribute to support the ISO 20022 digital signature.  
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: betiana.darderes@portx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { AccountHold } from '../model/accountHold';
import { AccountHoldRequest } from '../model/accountHoldRequest';
import { AccountHoldResponse } from '../model/accountHoldResponse';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class AccountHoldsService {

    protected basePath = 'https://virtserver.swaggerhub.com/PortX/open-banking-accounts/1.0.16';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Request an account hold
     * 
     * @param accountId Account Identification
     * @param accountHoldRequest 
     * @param idempotencyId Idempotency identifier used by the client when making repeated calls
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAccountHold(accountId: string, accountHoldRequest: AccountHoldRequest, idempotencyId?: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<AccountHold>>;
    public createAccountHold(accountId: string, accountHoldRequest: AccountHoldRequest, idempotencyId?: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling createAccountHold.');
        }

        if (accountHoldRequest === null || accountHoldRequest === undefined) {
            throw new Error('Required parameter accountHoldRequest was null or undefined when calling createAccountHold.');
        }

        let headers = {...this.defaultHeaders};
        if (idempotencyId !== undefined && idempotencyId !== null) {
            headers['idempotencyId'] = String(idempotencyId);
        }
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<AccountHold>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/holds`,
                    accountHoldRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves an account hold by id.
     * 
     * @param holdId Account Hold Identification
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAccountHoldById(holdId: string, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<AccountHold>>;
    public findAccountHoldById(holdId: string, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (holdId === null || holdId === undefined) {
            throw new Error('Required parameter holdId was null or undefined when calling findAccountHoldById.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<AccountHold>(`${this.basePath}/holds/${encodeURIComponent(String(holdId))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Retrieves Account Holds
     * 
     * @param accountId Account Identification
     * @param paginationCursor Pagination Cursor
     * @param paginationTotal Total number of resources. 
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param cursor Specifies an opaque string value ( \&quot;no  meaning\&quot; string value) at which start retrieving transactions. For instance, limit&#x3D;5&amp;cursor&#x3D;62aef884fbe3470ce7d9a92140b09b17 
     * @param limit Specifies the number of resources to return in one request, specified as an integer from 1 to 100. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAccountHolds(accountId: string, paginationCursor: string, paginationTotal: string, servicerId?: string, servicerBranchId?: string, cursor?: string, limit?: string, ): Observable<AxiosResponse<AccountHoldResponse>>;
    public findAccountHolds(accountId: string, paginationCursor: string, paginationTotal: string, servicerId?: string, servicerBranchId?: string, cursor?: string, limit?: string, ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling findAccountHolds.');
        }

        if (paginationCursor === null || paginationCursor === undefined) {
            throw new Error('Required parameter paginationCursor was null or undefined when calling findAccountHolds.');
        }

        if (paginationTotal === null || paginationTotal === undefined) {
            throw new Error('Required parameter paginationTotal was null or undefined when calling findAccountHolds.');
        }

        let queryParameters = new URLSearchParams();
        if (cursor !== undefined && cursor !== null) {
            queryParameters.append('cursor', <any>cursor);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }
        if (paginationCursor !== undefined && paginationCursor !== null) {
            headers['Pagination-Cursor'] = String(paginationCursor);
        }
        if (paginationTotal !== undefined && paginationTotal !== null) {
            headers['Pagination-Total'] = String(paginationTotal);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<AccountHoldResponse>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/holds`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Updates an account hold
     * Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
     * @param holdId Account Hold Identification
     * @param body 
     * @param servicerId Account Servicer Identification (Bank)
     * @param servicerBranchId Identification of the account servicer institution at branch level or center level.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAccountHold(holdId: string, body: object, servicerId?: string, servicerBranchId?: string, ): Observable<AxiosResponse<AccountHold>>;
    public updateAccountHold(holdId: string, body: object, servicerId?: string, servicerBranchId?: string, ): Observable<any> {
        if (holdId === null || holdId === undefined) {
            throw new Error('Required parameter holdId was null or undefined when calling updateAccountHold.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateAccountHold.');
        }

        let headers = {...this.defaultHeaders};
        if (servicerId !== undefined && servicerId !== null) {
            headers['servicerId'] = String(servicerId);
        }
        if (servicerBranchId !== undefined && servicerBranchId !== null) {
            headers['servicerBranchId'] = String(servicerBranchId);
        }

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (openIdConnect) required
        // authentication (jwt) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<AccountHold>(`${this.basePath}/holds/${encodeURIComponent(String(holdId))}`,
                    body,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
}
